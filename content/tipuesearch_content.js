var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁:\xa0\xa0 https://41136103.github.io/cd2024/ \n 網誌:  https://41136103.github.io/cd2024/ blog \n 簡報:  https://41136103.github.io/cd2024/ reveal \n 倉儲: https://github.com/41136103/cd2024 \n 期中統整影片連結: 按這裡 \xa0，\xa0 期中統整簡報連結: 點擊 \n', 'tags': '', 'url': 'About.html'}, {'title': 'cmsimde', 'text': "SMap \xa0 - SiteMap - 依照階次列出網站的所有頁面. \n EditA \xa0 - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit \xa0 - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config \xa0 - Configure Site - 編輯頁面標題與管理者密碼. \n Search \xa0 - 動態頁面內容的關鍵字搜尋. \n IUpload \xa0 - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList \xa0 - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload\xa0 - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList\xa0 - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout \xa0 - 登出頁面編輯模式. \n Convert\xa0 - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp \xa0 - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic \xa0 - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic\xa0 - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80 \xa0 - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': '期中前做的事', 'text': '1.利用https://github.com/mdecycu/cmsimde_site, 作為 Template, 新增一個名稱為 cd2024 的倉儲, 並且將其 main 分支設為網頁跟目錄 \n 2.將個人倉儲 import 至 Replit 然後維護 \n 3.利用 Codespaces 維護倉儲與網站 \n 4.編輯網誌，網頁 \n 5.翻譯論文 分配到的頁數 \n 6.將指定影片上字幕 \n 7.製作期中簡報、影片 \n', 'tags': '', 'url': '期中前做的事.html'}, {'title': '"翻譯論文"分組作業', 'text': '主旨:將 老師給的論文 進行翻譯，我在小組裡被分配到論文頁數65-77頁。 \n 翻譯後之論文pdf的雲端連結: \n https://drive.google.com/file/d/1Y8tQ6sYAMnMSVIhMBNSwuI2AiJMt21RG/view?usp=drive_link \n', 'tags': '', 'url': '"翻譯論文"分組作業.html'}, {'title': '教學影片嵌入字幕', 'text': '負責第1及第2部老師的教學影片 \n 第1部的雲端連結 : 按這裡 \xa0(影片及逐字稿) \n youtube連結:\xa0 https://youtu.be/yYFnHfW791Q?si=YS37mFjuN6H2ttmh \n ---------------------------------------------------------------------------------------------------------------- \n 第2部的雲端連結 : 點下去 \xa0(影片及逐字稿) \n youtube連結:\xa0 https://youtu.be/niQibqyyJH8?si=Cn8BqGe_pHQxj3ha \n \n 上字幕的過程: \n 1.影片上字幕自學: \n 先是觀看 youtube "\xa0 AI 上字幕教學｜OpenAI Whisper 教學｜免費自動字幕 (逐字稿) 生成軟體 WhisperDesktop"這部影片，但並非完全順利隨著此影片的教導，所以我加以摸索，找到了第二部 \xa0youtube\xa0 教學影片叫 " 終於找到超快上字幕的方法了 ( 剪映 V.S 雅婷小姐)"， 最終將這兩部影片所教導的吸收過後加以整合 \xa0，最後 我成功把老師的教學影片 嵌上字幕。 \n 此 youtube 第一部影片 連結: 點擊 ， 此 youtube 第二部影片 連結: 點擊 \n \n 2.上字幕用到的"軟體、模組" and "使用的順序和方法" : \n 用到的軟體、模組: \n 1.剪映\xa0 2. WhisperDesktop (GitHub)\xa0 3.WhisperDesktop 的ggml 語言模組 \n \xa0 1.剪映 \n \n 剪映 是由 字節跳動 旗下臉萌科技開發的一款 影片剪輯軟體 \xa0 ，該軟體依託於 抖音 平台，且基本面向該平台使用者製作短影音內容，併兼容 iOS 、 安卓 、 Windows 、 Mac OS 等作業系統。 並推出可以在瀏覽器執行的網頁版\xa0 \n \xa0 2. WhisperDesktop (GitHub) \n \xa0 \n 在此處下載軟體，連結: https://github.com/Const-me/Whisper \n \xa0 3.WhisperDesktop 的ggml 語言模組 \n \n 在此處下載模組，連結: https://huggingface.co/ggerganov/whisper.cpp/tree/main \n \n 順序: \n 步驟1.載" WhisperDesktop (GitHub)" \n 步驟2.載 " WhisperDesktop\xa0ggml 語言模組(選用\xa0 ggml-medium.en.bin \xa01.53GB) " \n 步驟3.載"剪映"這個剪輯軟體 \n 步驟4.將 語言模組( ggml-medium.en.bin \xa01.53GB)和老師的教學影片檔丟入 " WhisperDesktop (GitHub)"等經過幾分鐘之後導出"cc字幕 srt檔"、"逐字稿 srt檔" \n 步驟5.將其"cc字幕 srt檔" 以及 "老師的教學影片"丟入"剪映"這個剪片軟體，最終會藉著"剪映"的軟體功能把老師的教學影片成功的 嵌入字幕 \n 3.學習過程: \n 觀看影片後我只有跟著操作一半，剩下另一半則是看另一部影片，所以是以這兩部影片進行學習如何上字幕，這個 youtube 影片是 youtube 搜索 " 終於找到超快上字幕的方法了 ( 剪映 V.S 雅婷小姐)" 這部影片，我在第一部影片跟著學習時遇到了瓶頸，因為" " AI 上字幕教學｜OpenAI Whisper 教學｜免費自動字幕 (逐字稿) 生成軟體 WhisperDesktop"這部影片的後半段是叫我把字幕變成jpg圖片檔在導入影片剪輯軟體內進行上字幕，但是她影片裡上字幕用的編輯軟體是要付費的，所以我又尋找了第二部影片，第二部影片告訴我可以用第一部影片所教的把影片丟入" WhisperDesktop (GitHub)"這個軟體，利用此軟體的AI轉語音的功能協助我把老師的教學影片導出cc字幕 srt檔、逐字稿\xa0srt檔，最後再藉由第二部影片所教的，利用"剪映"這個剪片軟體導入cc字幕 srt檔，就可以成功幫老師的教學影片上字幕了。 \n 4.學習心得: \n 藉由此次老師要求我們上字幕，成功學習到如何將影片上字幕，還有學習使用 "剪映" 、"WhisperDesktop (GitHub)"\xa0 、"WhisperDesktop ggml 語言模組" 這些軟體、模組 工具來上字幕，更提升我自主學習的能力及知識的結合，所以我覺得本次教學影片上字幕的這個任務對我來說受益良多。 \n', 'tags': '', 'url': '教學影片嵌入字幕.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n \n', 'tags': '', 'url': 'Brython.html'}]};